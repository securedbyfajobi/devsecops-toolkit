# Kubernetes Network Security Policies
# Comprehensive network segmentation and micro-segmentation for zero-trust architecture
# Based on NIST 800-207 Zero Trust Architecture and Kubernetes security best practices

---
# Default deny-all network policy (apply to all namespaces)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: default
  labels:
    security.kubernetes.io/policy-type: "baseline"
    security.kubernetes.io/zero-trust: "enabled"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Default deny-all for production namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all-production
  namespace: production
  labels:
    security.kubernetes.io/policy-type: "strict"
    environment: production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Default deny-all for PCI DSS workloads
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all-pci
  namespace: pci-dss-workloads
  labels:
    security.kubernetes.io/policy-type: "strict"
    compliance.kubernetes.io/pci-dss: "enabled"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Allow DNS resolution (essential for cluster functionality)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-access
  namespace: default
  labels:
    security.kubernetes.io/policy-type: "essential"
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Allow essential cluster communications
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-essential-cluster-comms
  namespace: kube-system
  labels:
    security.kubernetes.io/policy-type: "system"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector: {}
  egress:
  - to:
    - namespaceSelector: {}

---
# Web application network policy (frontend tier)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: web-frontend-policy
  namespace: production
  labels:
    app.kubernetes.io/tier: frontend
    security.kubernetes.io/policy-type: "application"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/tier: frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow traffic from ingress controllers
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443
  - from:
    # Allow traffic from load balancers
    - ipBlock:
        cidr: 10.0.0.0/8
        except:
        - 10.0.1.0/24  # Exclude sensitive subnets
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  - to:
    # Allow communication to backend API services
    - podSelector:
        matchLabels:
          app.kubernetes.io/tier: backend
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Backend API network policy (application tier)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-api-policy
  namespace: production
  labels:
    app.kubernetes.io/tier: backend
    security.kubernetes.io/policy-type: "application"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/tier: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow traffic from frontend
    - podSelector:
        matchLabels:
          app.kubernetes.io/tier: frontend
    ports:
    - protocol: TCP
      port: 8080
  - from:
    # Allow traffic from other backend services
    - podSelector:
        matchLabels:
          app.kubernetes.io/tier: backend
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090  # Metrics
  egress:
  - to:
    # Allow communication to database
    - podSelector:
        matchLabels:
          app.kubernetes.io/tier: database
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 3306  # MySQL
  - to:
    # Allow communication to cache
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: cache
    ports:
    - protocol: TCP
      port: 6379  # Redis
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  - to:
    # Allow external API calls (with restrictions)
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Database network policy (data tier)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-policy
  namespace: production
  labels:
    app.kubernetes.io/tier: database
    security.kubernetes.io/policy-type: "data"
    security.kubernetes.io/sensitivity: "high"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/tier: database
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Only allow backend services
    - podSelector:
        matchLabels:
          app.kubernetes.io/tier: backend
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 3306  # MySQL
  - from:
    # Allow monitoring
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9187  # PostgreSQL exporter
    - protocol: TCP
      port: 9104  # MySQL exporter
  egress:
  - to: []  # Allow DNS only
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Monitoring namespace network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-policy
  namespace: monitoring
  labels:
    security.kubernetes.io/policy-type: "observability"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow Grafana to access Prometheus
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    ports:
    - protocol: TCP
      port: 9090
  - from:
    # Allow external monitoring access (restricted IPs)
    - ipBlock:
        cidr: 10.0.100.0/24  # Admin subnet
    ports:
    - protocol: TCP
      port: 3000  # Grafana
    - protocol: TCP
      port: 9090  # Prometheus
  egress:
  - to:
    # Allow scraping all namespaces
    - namespaceSelector: {}
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# PCI DSS compliant network policy for payment processing
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pci-payment-processing
  namespace: pci-dss-workloads
  labels:
    security.kubernetes.io/policy-type: "pci-dss"
    compliance.kubernetes.io/pci-scope: "true"
    security.kubernetes.io/encryption-required: "true"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: payment-processor
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Only allow from authenticated API gateway
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: api-gateway
          security.kubernetes.io/authenticated: "true"
    ports:
    - protocol: TCP
      port: 8443  # HTTPS only
  egress:
  - to:
    # Allow communication to PCI-compliant database
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: payment-database
          compliance.kubernetes.io/pci-dss: "enabled"
    ports:
    - protocol: TCP
      port: 5432  # Encrypted PostgreSQL
  - to:
    # Allow external payment gateway (specific IPs only)
    - ipBlock:
        cidr: 203.0.113.0/24  # Payment gateway subnet
    ports:
    - protocol: TCP
      port: 443  # HTTPS only
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53

---
# Development environment (more permissive for testing)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: development-policy
  namespace: development
  labels:
    security.kubernetes.io/policy-type: "development"
    environment: development
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow all traffic within development namespace
    - namespaceSelector:
        matchLabels:
          name: development
  - from:
    # Allow traffic from developer subnets
    - ipBlock:
        cidr: 10.0.200.0/24  # Developer VPN subnet
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 5000
  egress:
  - to:
    # Allow communication within development
    - namespaceSelector:
        matchLabels:
          name: development
  - to: []  # Allow all egress for development
    ports:
    - protocol: TCP
    - protocol: UDP

---
# Service mesh policy (if using Istio/Linkerd)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: service-mesh-policy
  namespace: production
  labels:
    security.kubernetes.io/policy-type: "service-mesh"
spec:
  podSelector:
    matchLabels:
      security.istio.io/tlsMode: istio
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow Istio sidecar traffic
    - namespaceSelector:
        matchLabels:
          name: istio-system
  egress:
  - to:
    # Allow Istio control plane communication
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15010  # Pilot
    - protocol: TCP
      port: 15011  # Pilot
    - protocol: TCP
      port: 15014  # Citadel

---
# Security scanning tools network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-scanning-policy
  namespace: security-system
  labels:
    security.kubernetes.io/policy-type: "security-tools"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: security-scanner
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow access from security dashboard
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: security-dashboard
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    # Allow scanning all namespaces
    - namespaceSelector: {}
  - to: []  # Allow external vulnerability database updates
    ports:
    - protocol: TCP
      port: 443
    - protocol: UDP
      port: 53

---
# Ingress controller network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-controller-policy
  namespace: ingress-nginx
  labels:
    security.kubernetes.io/policy-type: "ingress"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []  # Allow all ingress traffic
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 8080  # Webhook
  egress:
  - to:
    # Allow communication to all application namespaces
    - namespaceSelector:
        matchExpressions:
        - key: name
          operator: In
          values: ["production", "staging", "development"]
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53

---
# Cross-cluster communication policy (for multi-cluster setups)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cross-cluster-policy
  namespace: production
  labels:
    security.kubernetes.io/policy-type: "cross-cluster"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/cross-cluster: "enabled"
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow traffic from trusted cluster CIDRs
    - ipBlock:
        cidr: 10.1.0.0/16  # Cluster 2 CIDR
    - ipBlock:
        cidr: 10.2.0.0/16  # Cluster 3 CIDR
    ports:
    - protocol: TCP
      port: 8443  # Secure communication only
  egress:
  - to:
    # Allow communication to other clusters
    - ipBlock:
        cidr: 10.1.0.0/16  # Cluster 2
    - ipBlock:
        cidr: 10.2.0.0/16  # Cluster 3
    ports:
    - protocol: TCP
      port: 8443

---
# Emergency break-glass policy (disabled by default)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: emergency-break-glass
  namespace: production
  labels:
    security.kubernetes.io/policy-type: "emergency"
    security.kubernetes.io/enabled: "false"
  annotations:
    security.kubernetes.io/emergency-contact: "security-team@company.com"
    security.kubernetes.io/approval-required: "true"
spec:
  podSelector:
    matchLabels:
      security.kubernetes.io/emergency-access: "approved"
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow emergency access from specific admin IPs
    - ipBlock:
        cidr: 203.0.113.100/32  # Emergency admin IP
  egress:
  - to: []  # Allow all egress during emergency