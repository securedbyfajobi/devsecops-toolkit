# GitHub Actions Security Workflow
# Enterprise-grade security scanning and compliance pipeline

name: Security Scan & Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  # Security scanning configuration
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Secret scanning with multiple tools
  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Static Application Security Testing
  sast-codeql:
    name: SAST - CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript', 'go', 'java' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Semgrep SAST scanning
  sast-semgrep:
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Safety check for Python dependencies
        if: hashFiles('**/requirements.txt') != ''
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Nancy scan for Go dependencies
        if: hashFiles('**/go.mod') != ''
        run: |
          curl -L -o nancy https://github.com/sonatypecommunity/nancy/releases/download/v1.0.42/nancy-v1.0.42-linux-amd64
          chmod +x nancy
          go list -json -deps ./... | ./nancy sleuth --loud

  # Container image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('**/Dockerfile') != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t test-image:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: "test-image:${{ github.sha }}"
          fail-build: false
          severity-cutoff: critical

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  # Infrastructure as Code security scanning
  iac-scan:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,kubernetes,docker,cloudformation
          output_format: sarif
          output_file_path: checkov.sarif
          api-key: ${{ secrets.CHECKOV_API_KEY }}

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: TFSec Terraform security scan
        if: hashFiles('**/*.tf') != ''
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          sarif_file: tfsec.sarif

      - name: Upload TFSec scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('**/*.tf') != ''
        with:
          sarif_file: tfsec.sarif

  # License compliance scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: FOSSA license scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

  # Security compliance and policy checks
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [secret-detection, sast-codeql, dependency-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Security policy validation
        run: |
          echo "🔍 Validating security policies..."

          # Check for security.md
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ SECURITY.md file not found"
            exit 1
          fi

          # Check for branch protection
          echo "✅ Security policy validation passed"

      - name: Generate security report
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "- **Date**: $(date)" >> security-report.md
          echo "- **Commit**: ${{ github.sha }}" >> security-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scans Completed" >> security-report.md
          echo "- ✅ Secret Detection" >> security-report.md
          echo "- ✅ SAST Analysis" >> security-report.md
          echo "- ✅ Dependency Scanning" >> security-report.md
          echo "- ✅ Container Scanning" >> security-report.md
          echo "- ✅ IaC Security" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

  # Security gate - block deployment if critical issues found
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [secret-detection, sast-codeql, sast-semgrep, dependency-scan, container-scan, iac-scan]
    if: always()
    steps:
      - name: Check scan results
        run: |
          echo "🚦 Evaluating security gate..."

          # Check if any critical jobs failed
          if [ "${{ needs.secret-detection.result }}" == "failure" ]; then
            echo "❌ Secret detection failed - blocking deployment"
            exit 1
          fi

          if [ "${{ needs.sast-codeql.result }}" == "failure" ]; then
            echo "❌ SAST analysis failed - blocking deployment"
            exit 1
          fi

          echo "✅ Security gate passed - deployment approved"

      - name: Security gate notification
        if: failure()
        run: |
          echo "🚨 Security gate failed! Deployment blocked due to security violations."
          echo "Please review the security scan results and fix all critical issues."

  # Secure deployment (only runs if security gate passes)
  deploy:
    name: Secure Deployment
    runs-on: ubuntu-latest
    needs: [security-gate]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    steps:
      - name: Deploy with security controls
        run: |
          echo "🚀 Deploying with security validation..."
          echo "✅ All security checks passed"
          echo "🔒 Deployment approved and secured"