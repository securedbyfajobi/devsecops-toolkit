# Azure DevOps Security Pipeline
# Enterprise security scanning and compliance for Azure DevOps

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  branches:
    include:
    - main

schedules:
- cron: "0 2 * * *"
  displayName: Daily security scan
  branches:
    include:
    - main

variables:
  # Security scanning configuration
  vmImageName: 'ubuntu-latest'
  containerRegistry: '$(containerRegistryConnection)'
  imageRepository: '$(Build.Repository.Name)'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'

  # Security thresholds
  maxCriticalVulns: 0
  maxHighVulns: 5

pool:
  vmImage: $(vmImageName)

stages:
- stage: SecurityScan
  displayName: Security Scanning
  jobs:

  # Secret Detection
  - job: SecretDetection
    displayName: 'Secret Detection & Credential Scanning'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - script: |
        echo "Installing secret detection tools..."
        pip install detect-secrets truffleHog3
        wget -O gitleaks.tar.gz https://github.com/zricethezav/gitleaks/releases/download/v8.15.2/gitleaks_8.15.2_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks
      displayName: 'Install Secret Detection Tools'

    - script: |
        echo "Running GitLeaks scan..."
        ./gitleaks detect --source . --report-format json --report-path gitleaks-report.json --verbose || true

        echo "Running detect-secrets scan..."
        detect-secrets scan --all-files --force-use-all-plugins > .secrets.baseline

        echo "Running TruffleHog scan..."
        truffleHog3 --format json --output trufflehog-report.json . || true
      displayName: 'Run Secret Detection'

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/secret-scan-results.xml'
        failTaskOnFailedTests: true

  # Static Application Security Testing (SAST)
  - job: SAST
    displayName: 'Static Application Security Testing'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'

    # Semgrep SAST
    - script: |
        pip install semgrep
        semgrep --config=auto --json --output=semgrep-report.json . || true
      displayName: 'Run Semgrep SAST'

    # Bandit for Python
    - script: |
        if find . -name "*.py" -not -path "./venv/*" | grep -q .; then
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
        fi
      displayName: 'Run Bandit (Python Security)'

    # ESLint security for JavaScript/TypeScript
    - script: |
        if find . -name "package.json" | grep -q .; then
          npm install -g eslint @typescript-eslint/parser eslint-plugin-security
          eslint . --ext .js,.ts --format json --output-file eslint-security-report.json || true
        fi
      displayName: 'Run ESLint Security (JavaScript/TypeScript)'

    # Gosec for Go
    - script: |
        if find . -name "*.go" | grep -q .; then
          curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
          $(go env GOPATH)/bin/gosec -fmt json -out gosec-report.json ./... || true
        fi
      displayName: 'Run Gosec (Go Security)'

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/sast-results.xml'

  # Dependency Vulnerability Scanning
  - job: DependencyScan
    displayName: 'Dependency Vulnerability Scanning'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'

    # Python dependencies with Safety
    - script: |
        if [ -f "requirements.txt" ]; then
          pip install safety
          safety check --json --output safety-report.json || true
          safety check --short-report || true
        fi
      displayName: 'Scan Python Dependencies (Safety)'

    # Node.js dependencies with npm audit
    - script: |
        if [ -f "package.json" ]; then
          npm audit --audit-level high --json > npm-audit-report.json || true
          npm audit --audit-level high || true
        fi
      displayName: 'Scan Node.js Dependencies (npm audit)'

    # Go dependencies with Nancy
    - script: |
        if [ -f "go.mod" ]; then
          curl -L -o nancy https://github.com/sonatypecommunity/nancy/releases/download/v1.0.42/nancy-v1.0.42-linux-amd64
          chmod +x nancy
          go list -json -deps ./... | ./nancy sleuth --output-format json > nancy-report.json || true
        fi
      displayName: 'Scan Go Dependencies (Nancy)'

    # Java dependencies with OWASP Dependency Check
    - script: |
        if find . -name "pom.xml" -o -name "build.gradle" | grep -q .; then
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip dependency-check-8.4.0-release.zip
          ./dependency-check/bin/dependency-check.sh --project "$(Build.Repository.Name)" --scan . --format JSON --out dependency-check-report.json
        fi
      displayName: 'Scan Java Dependencies (OWASP Dependency Check)'

  # Container Security Scanning
  - job: ContainerScan
    displayName: 'Container Security Scanning'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: $(tag)

    # Trivy container scanning
    - script: |
        echo "Installing Trivy..."
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

        echo "Scanning container image with Trivy..."
        trivy image --format json --output trivy-report.json $(imageRepository):$(tag)
        trivy image --severity HIGH,CRITICAL --exit-code 1 $(imageRepository):$(tag)
      displayName: 'Run Trivy Container Scan'

    # Grype container scanning
    - script: |
        echo "Installing Grype..."
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

        echo "Scanning container image with Grype..."
        grype $(imageRepository):$(tag) -o json > grype-report.json
        grype $(imageRepository):$(tag) --fail-on critical
      displayName: 'Run Grype Container Scan'

  # Infrastructure as Code Security
  - job: IaCScan
    displayName: 'Infrastructure as Code Security'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'

    # Checkov for multi-cloud IaC scanning
    - script: |
        pip install checkov
        checkov --directory . --output json --output-file checkov-report.json || true
        checkov --directory . --compact --quiet
      displayName: 'Run Checkov IaC Scan'

    # TFSec for Terraform
    - script: |
        if find . -name "*.tf" | grep -q .; then
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec . --format json --out tfsec-report.json || true
          tfsec . --soft-fail
        fi
      displayName: 'Run TFSec (Terraform Security)'

    # kube-score for Kubernetes manifests
    - script: |
        if find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "apiVersion" | grep -q .; then
          wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
          tar -xzf kube-score_1.16.1_linux_amd64.tar.gz
          chmod +x kube-score
          find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "apiVersion" | xargs ./kube-score score --output-format json > kube-score-report.json || true
        fi
      displayName: 'Run kube-score (Kubernetes Security)'

- stage: SecurityGate
  displayName: Security Gate & Compliance
  dependsOn: SecurityScan
  jobs:
  - job: SecurityGate
    displayName: 'Security Gate Evaluation'
    steps:
    - script: |
        echo "üö¶ Evaluating security gate..."

        # Initialize counters
        critical_issues=0
        high_issues=0

        # Check Trivy results
        if [ -f "trivy-report.json" ]; then
          critical_vulns=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-report.json 2>/dev/null || echo "0")
          high_vulns=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-report.json 2>/dev/null || echo "0")
          critical_issues=$((critical_issues + critical_vulns))
          high_issues=$((high_issues + high_vulns))
          echo "Container scan - Critical: $critical_vulns, High: $high_vulns"
        fi

        # Check dependency scan results
        if [ -f "safety-report.json" ]; then
          safety_critical=$(jq '[.[] | select(.vulnerability.v == "CRITICAL")] | length' safety-report.json 2>/dev/null || echo "0")
          critical_issues=$((critical_issues + safety_critical))
          echo "Python dependencies - Critical: $safety_critical"
        fi

        echo "Total critical issues: $critical_issues"
        echo "Total high issues: $high_issues"

        # Apply security gate rules
        if [ $critical_issues -gt $(maxCriticalVulns) ]; then
          echo "‚ùå Security gate FAILED: $critical_issues critical vulnerabilities found (max allowed: $(maxCriticalVulns))"
          exit 1
        fi

        if [ $high_issues -gt $(maxHighVulns) ]; then
          echo "‚ùå Security gate FAILED: $high_issues high vulnerabilities found (max allowed: $(maxHighVulns))"
          exit 1
        fi

        echo "‚úÖ Security gate PASSED: All security checks within acceptable thresholds"
      displayName: 'Evaluate Security Gate'

  - job: ComplianceReport
    displayName: 'Generate Compliance Report'
    steps:
    - script: |
        echo "üìä Generating security compliance report..."

        cat > security-compliance-report.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "build_id": "$(Build.BuildId)",
          "repository": "$(Build.Repository.Name)",
          "branch": "$(Build.SourceBranchName)",
          "commit": "$(Build.SourceVersion)",
          "scans_completed": {
            "secret_detection": true,
            "sast_analysis": true,
            "dependency_scanning": true,
            "container_scanning": true,
            "iac_security": true
          },
          "security_gate_status": "PASSED",
          "compliance_frameworks": [
            "OWASP Top 10",
            "NIST Cybersecurity Framework",
            "CIS Controls"
          ]
        }
        EOF

        echo "‚úÖ Compliance report generated"
      displayName: 'Generate Compliance Report'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'security-compliance-report.json'
        artifactName: 'security-compliance-report'

- stage: SecureDeploy
  displayName: Secure Deployment
  dependsOn: SecurityGate
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production with Security Controls'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "üöÄ Deploying with security validation..."
              echo "‚úÖ All security checks passed"
              echo "üîí Deployment approved and secured"
              echo "üìä Security compliance verified"
            displayName: 'Secure Deployment'